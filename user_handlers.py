from aiogram import Router, F, Bot
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery, ReplyKeyboardMarkup,KeyboardButton
import logging
from datetime import datetime
from ai_tools import analyze_production_message, process_response
from database import get_active_downtimes,get_downtime_report,delete_old_downtimes

GROUP_ID = 4643470681
TARGET_USER_ID = 1685244410

# –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –º–µ–Ω—é
menu_buttons = [
    [KeyboardButton(text="–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏")],
    [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –¥–µ–Ω—å")],
    [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")],
    [KeyboardButton(text="–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –º–µ—Å—è—Ü")]
]

menu_kb = ReplyKeyboardMarkup(keyboard=menu_buttons, resize_keyboard=True)

router = Router()

@router.message(CommandStart())
async def process_start_command(message: Message):
    await message.answer("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω", reply_markup = menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤
@router.message(F.text == "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏")
async def show_active_downtimes(message: Message):
    active_downtimes = get_active_downtimes()
    if active_downtimes:
        response = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç–æ–∏:\n"
        for downtime in active_downtimes:
            response += f"–¶–µ—Ö {downtime[0]}, –ê–≥—Ä–µ–≥–∞—Ç {downtime[1]}, –ù–∞—á–∞–ª–æ: {downtime[2]}\n"
    else:
        response = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Å—Ç–æ–µ–≤."
    await message.answer(response, reply_markup=menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ–µ–≤ –∑–∞ –¥–µ–Ω—å
@router.message(F.text == "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –¥–µ–Ω—å")
async def show_downtimes_day(message: Message):
    report = get_downtime_report("day")
    if report:
        response = "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å:\n"
        for downtime in report:
            response += f"–¶–µ—Ö {downtime[0]}, –ê–≥—Ä–µ–≥–∞—Ç {downtime[1]}, –ù–∞—á–∞–ª–æ: {downtime[2]}, –ö–æ–Ω–µ—Ü: {downtime[3] or '–ï—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}\n"
    else:
        response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å—Ç–æ—è—Ö –∑–∞ –¥–µ–Ω—å."
    await message.answer(response, reply_markup=menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ–µ–≤ –∑–∞ –Ω–µ–¥–µ–ª—é
@router.message(F.text == "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –Ω–µ–¥–µ–ª—é")
async def show_downtimes_week(message: Message):
    report = get_downtime_report("week")
    if report:
        response = "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é:\n"
        for downtime in report:
            response += f"–¶–µ—Ö {downtime[0]}, –ê–≥—Ä–µ–≥–∞—Ç {downtime[1]}, –ù–∞—á–∞–ª–æ: {downtime[2]}, –ö–æ–Ω–µ—Ü: {downtime[3] or '–ï—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}\n"
    else:
        response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å—Ç–æ—è—Ö –∑–∞ –Ω–µ–¥–µ–ª—é."
    await message.answer(response, reply_markup=menu_kb)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø—Ä–æ—Å—Ç–æ–µ–≤ –∑–∞ –º–µ—Å—è—Ü
@router.message(F.text == "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –º–µ—Å—è—Ü")
async def show_downtimes_month(message: Message):
    report = get_downtime_report("month")
    if report:
        response = "–ü—Ä–æ—Å—Ç–æ–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü:\n"
        for downtime in report:
            response += f"–¶–µ—Ö {downtime[0]}, –ê–≥—Ä–µ–≥–∞—Ç {downtime[1]}, –ù–∞—á–∞–ª–æ: {downtime[2]}, –ö–æ–Ω–µ—Ü: {downtime[3] or '–ï—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω'}\n"
    else:
        response = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ—Å—Ç–æ—è—Ö –∑–∞ –º–µ—Å—è—Ü."
    await message.answer(response, reply_markup=menu_kb)
# üì® –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ
@router.message()
async def forward_messages(message: Message, bot: Bot):
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    alert = {}
    user_input = message.text
    alert_time = datetime.now().strftime("%H:%M:%S")
    author = message.from_user.full_name
    alert = {"text": user_input, "time": alert_time, "author": author}
    message = analyze_production_message(alert)
    summary = process_response(message)
    try:
        # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–∫—É —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(TARGET_USER_ID, summary)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")